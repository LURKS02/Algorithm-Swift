let N = Int(readLine()!)!
let jumpLine = readLine()!.split(separator: " ").map { Int($0)! }

//‚úÖ Ïª§ÏÑú ÌÅê
struct Queue<T> {
    var data = [T]() //üëâ elementÎ•º Ï†ÄÏû•ÌïòÎäî Î∞∞Ïó¥
    var index = 0 //üëâ queueÏùò Îß® ÏïûÏùÑ Í∞ÄÎ¶¨ÌÇ§Îäî Ïª§ÏÑú
    
    //‚úÖ ÎπÑÏóàÎäîÏßÄ ÌôïÏù∏
    var isEmpty: Bool {
        return !(data.count > index) //üëâ countÏùò ÏãúÍ∞ÑÎ≥µÏû°ÎèÑ O(1)
        //üëâ indexÍ∞Ä dataÏùò Í∞ØÏàòÎ≥¥Îã§ ÏûëÎã§Î©¥? = ÏïÑÏßÅ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎã§.
            // ÎßàÏßÄÎßâ dataÍ∞Ä dequeueÎêòÎ©¥ indexÍ∞Ä data.countÏôÄ Í∞ôÏïÑÏßÑÎã§Îäî Í≤ÉÏùÑ ÏÉùÍ∞ÅÌïòÎ©¥ Ïù¥Ìï¥ÌïòÍ∏∞ ÏâΩÎã§.
    }
    
    //‚úÖ ÌÅêÏóê ÎÑ£Í∏∞
    mutating func enqueue(_ element: T) {
        data.append(element)
    }
    
    //‚úÖ ÌÅêÏóêÏÑú ÎπºÍ∏∞
    mutating func dequeue() -> T {
        //‚≠êÔ∏è deferÎ¨∏ÏùÑ ÌôúÏö©Ìï¥ÏÑú returnÎêú Ïù¥ÌõÑÏóê indexÎ•º 1 ÎäòÎ†§Ï§ÄÎã§.
        defer {
            index += 1
        }
        return data[index] //üëâ ÌòÑÏû¨ indexÎ•º returnÌïúÎã§.
    }
}


func dfs(_ start: Int) -> Int {
    var deque = Queue<(Int, Int)>()
    deque.enqueue((start, 0))
    var visited = Array(repeating: false, count: N)
    visited[start] = true
    
    while !deque.isEmpty {
        var (currentPosition, count) = deque.dequeue()
        
        if currentPosition == N-1 {
            return count
        }
        
        var number = jumpLine[currentPosition]
        
        if number == 0 {
            continue
        }
        
        for i in 1...number {
            let newPosition = currentPosition + i
            if newPosition < N && !visited[newPosition] {
                deque.enqueue((newPosition, count + 1))
                visited[newPosition] = true
            }
        }
    }
    
    return -1
}

if N == 1 {
    print(0)
}

else {
    print(dfs(0))
}
